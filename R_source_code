####################################################################
# These are the simultaions for an SEIR model with two risk groups
####################################################################

library(deSolve)

#---------------------
#IMPORTANT PARAMETERS:
#---------------------

#Total population size:
N <- 1000000 

#Fraction of the population that is high-risk
fraction.high.risk <- 0.33

#The initial number of individuals in the exposed or infected 
#categories (these individuals are split between high and 
#low risk categories according to the previous fraction)
initial.e <- 100
initial.i <- 10

#The fraction of various hosts that remain within the
#"interaction" pool
fraction.interacting <- 0.85

#A bool for whether high-risk infected (hri) people are
#less interactive
are.hri.less.interactive <- FALSE

#If previous bool is TRUE, the uniform fraction of hri 
#hosts in the "interaction" pool is this value:
hri.fraction.interacting <- 0.5

#A bool for whether low-risk infected (lri) people are 
#less interactive
are.lri.less.interactive <- FALSE

#If previous bool is TRUE, the uniform fraction of lri 
#hosts in the "interaction" pool is this value:
lri.fraction.interacting <- 0.75


#----------------------------
#FUNCTIONS & STATE VARIABLES:
#----------------------------

#This function returns a vector of parameters
#under four different scenarios:
#Case 1 -- No behavioral reduction in interaction by any individual
#Case 2 -- Behavioral reduction by only high-risk individuals (i.e., S and I)
#Case 3 -- Behavioral reduction by only low-risk individuals 
#Case 4 -- Behavioral reduction by all individuals (full preventative measures)
#Due to illness, infected individuals might be less interactive uniformly
#which is also incorporated as a possibility.
parameters <- function(case) {
  if(case==1) {
    if(are.hri.less.interactive) {
      t_I_H <- hri.fraction.interacting
    } else {
      t_I_H <- 1.0
    }
    if(are.lri.less.interactive) {
      t_I_L <- lri.fraction.interacting
    } else {
      t_I_L <- 1.0
    } 
    t_S_H <- 1.0
    t_S_L <- 1.0
  }
  if(case==2) {
    if(are.hri.less.interactive) {
      t_I_H <- hri.fraction.interacting
    } else {
      t_I_H <- fraction.interacting
    }
    if(are.lri.less.interactive) {
      t_I_L <- lri.fraction.interacting
    } else {
      t_I_L <- 1.0
    }
    t_S_H <- fraction.interacting
    t_S_L <- 1.0
  }
  if(case==3) {
    if(are.hri.less.interactive) {
      t_I_H <- hri.fraction.interacting
    } else {
      t_I_H <- 1.0
    }
    if(are.lri.less.interactive) {
      t_I_L <- lri.fraction.interacting
    } else {
      t_I_L <- fraction.interacting
    }
    t_S_H <- 1.0
    t_S_L <- fraction.interacting
  }
  if(case==4) {
    if(are.hri.less.interactive) {
      t_I_H <- hri.fraction.interacting
    } else {
      t_I_H <- fraction.interacting
    }
    if(are.lri.less.interactive) {
      t_I_L <- lri.fraction.interacting
    } else {
      t_I_L <- fraction.interacting
    }
    t_S_H <- fraction.interacting
    t_S_L <- fraction.interacting
  }
  pars <- c(beta = 0.134, 
            theta_I_H = t_I_H,
            theta_I_L = t_I_L,
            theta_S_H = t_S_H,
            theta_S_L = t_S_L,
            sigma_H = 0.192,       #1/5.2
            sigma_L = 0.192,
            gamma_H = 0.08071,     #1/12.39
            gamma_L = 0.08071,
            mu_H = 0.002,         #0.0004/.2
            mu_L = 0.0)
  return(pars)
}

#This vector defines the state variables for hosts,
#including susceptible (S), exposed (E), infected (I), 
#recovered (R), and deceased (D). The _H and _L 
#indicates whether the host is hisk-risk or low-risk.
#The t=0 values are specified here.
state <- c(S_H = fraction.high.risk*(N - initial.e - initial.i),
           S_L = (1 - fraction.high.risk)*(N - initial.e - initial.i),
           E_H = fraction.high.risk*initial.e,
           E_L = (1 - fraction.high.risk)*initial.e,
           I_H = fraction.high.risk*initial.i,
           I_L = (1 - fraction.high.risk)*initial.i,
           R_H = 0,
           R_L = 0,
           D_H = 0,
           D_L = 0)

#This function lays out the differential equations that
#define the SEIR Risk model.
seir_2_risk_covid <-function(t, state, parameters) {
  with(as.list(c(state, parameters)),{
    dS_H <- (-beta*(theta_I_H * I_H + theta_I_L * I_L)*(theta_S_H * S_H))/(S_H + S_L + E_H + E_L + I_H + I_L + R_H + R_L)
    dS_L <- (-beta*(theta_I_H * I_H + theta_I_L * I_L)*(theta_S_L * S_L))/(S_H + S_L + E_H + E_L + I_H + I_L + R_H + R_L)
    dE_H <- (beta*(theta_I_H * I_H + theta_I_L * I_L)*(theta_S_H * S_H))/(S_H + S_L + E_H + E_L + I_H + I_L + R_H + R_L) - (sigma_H * E_H)
    dE_L <- (beta*(theta_I_H * I_H + theta_I_L * I_L)*(theta_S_L * S_L))/(S_H + S_L + E_H + E_L + I_H + I_L + R_H + R_L) - (sigma_L * E_L)
    dI_H <- (sigma_H * E_H) - (gamma_H + mu_H)*I_H
    dI_L <- (sigma_L * E_L) - (gamma_L + mu_L)*I_L
    dR_H <- (gamma_H * I_H)
    dR_L <- (gamma_L * I_L)
    dD_H <- (mu_H * I_H)
    dD_L <- (mu_L * I_L)
    list(c(dS_H, dS_L, dE_H, dE_L, dI_H, dI_L, dR_H, dR_L, dD_H, dD_L))
  }) 
}

#Using the deSolve function "ode", this function numerically simulates
#one of the parametric cases for a certain amount of time. It returns
#a data frame with all the time courses for each host type.
simulate <- function(case, total.time) {
  times <- seq(0, total.time, by = 1)
  out <- ode(y = state, times = times, func = seir_2_risk_covid, parms = parameters(case))
  colnames(out) <- c("time","Susceptible_H","Susceptible_L",
                     "Exposed_H","Exposed_L","Infected_H","Infected_L",
                     "Recovered_H","Recovered_L","Deceased_H","Deceased_L")
  epi.df<-as.data.frame(out)
  return(epi.df)
}

#This function plots (or adds a line to an existing plot, if first==FALSE)
#the trajectory defined by vectors x and y. A color vector (rgbv) as well
#as labels and limits for the y axis are also arguments.
add.curve <- function(x, y, first, rgbv, ylabel, ylimit) {
  if(first) {
    par(mar = c(4, 4, .5, .5),mfrow=c(1,1))
    plot(x, y, type="l", lwd=2, xlab = "time (days)", ylab = ylabel, 
         col=rgb(rgbv[1],rgbv[2],rgbv[3]),ylim=c(ylimit[1],ylimit[2]))
    polygon(c(x,rev(x)),c(y,rep(0,length(x))),
            col=rgb(rgbv[1],rgbv[2],rgbv[3],0.5),border=NA)
    lines(x, y, lwd=2, col=rgb(rgbv[1],rgbv[2],rgbv[3]))
  } else {
    polygon(c(x,rev(x)),c(y,rep(0,length(x))),
            col=rgb(rgbv[1],rgbv[2],rgbv[3],0.5),border=NA)
    lines(x, y, lwd=2, col=rgb(rgbv[1],rgbv[2],rgbv[3]))
  }
}

#This function creates a color vector for the different cases.
color.vec <- function(case) {
  if(case==1) {
    return(c(0,0,0))
  }
  if(case==2) {
    return(c(1,0,0))
  }
  if(case==3) {
    return(c(0,0,1))
  }
  if(case==4) {
    return(c(1,0,1))
  }
}


#-------------------------------
#RUNNING & PLOTTING SIMULATIONS:
#-------------------------------

#Draw total infected cases plot
for(i in 1:4) {
  epi<-simulate(i,1000)
  add.curve(epi$time, epi$Infected_H + epi$Infected_L, i==1,
            color.vec(i), "total infected cases", c(0,65000))  
}
text(260,62000,"no proactive measures",cex=.7,pos=4)
text(320,42000,"proactive measures only for high-risk individuals",cex=.7,col="red",pos=4)
text(390,26800,"proactive measures only for low-risk individuals",cex=.7,col="blue",pos=4)
text(600,11600,"full proactive measures",cex=.7,col=rgb(1,0,1),pos=4)


#Draw high-risk infected cases plot
for(i in 1:4) {
  epi<-simulate(i,1000)
  add.curve(epi$time, epi$Infected_H, i==1,
            color.vec(i), "high-risk infected cases", c(0,65000))  
}
text(0,22500,"no proactive measures",cex=.7,pos=4)
text(290,16000,"proactive measures only for high-risk individuals",cex=.7,col="red",pos=4)
text(360,11100,"proactive measures only for low-risk individuals",cex=.7,col="blue",pos=4)
text(700,4000,"full proactive measures",cex=.7,col=rgb(1,0,1),pos=4)
